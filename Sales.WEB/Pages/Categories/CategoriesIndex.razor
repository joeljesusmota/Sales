@page "/categories"

@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager

<h3>Categories</h3>

<a class="btn btn-primary mb-3" href="/categories/create">Create Categories</a>

<GenericList MyList="Categories">
	<Body>
		<table class="table table-striped">
			<thead>
				<tr>
					<th></th>
					<th>Categoria</th>
				</tr>
			</thead>
			<tbody>
				@foreach (var category in Categories!)
				{
					<tr>
						<td>
							<a class="btn btn-warning" href="/categories/edit/@category.Id">Editar</a>
							<button class="btn btn-danger" @onclick=@(()=> DeleteAsync(category.Id))>Borrar</button>
						</td>
						<td>
							@category.Name
						</td>
					</tr>
				}
			</tbody>
		</table>
	</Body>
</GenericList>

@code {

	public List<Category>? Categories { get; set; }

	protected override async Task OnInitializedAsync()
	{
		await LoadAsynck();
	}

	private async Task LoadAsynck()
	{
		var responseHttp = await repository.Get<List<Category>>("/api/categories");
		Categories = responseHttp.Response;
	}

	private async Task DeleteAsync(int id)
	{
		var result = await sweetAlertService.FireAsync(new SweetAlertOptions
		{
				Title = "Confirmacion",
				Text = "Realmente deseas eliminar el registro?",
				Icon = SweetAlertIcon.Question,
				ShowCancelButton = true,
				CancelButtonText = "No",
				ConfirmButtonText = "Si"
		});

		var confirm = string.IsNullOrEmpty(result.Value);
		if (confirm)
		{
			return;
		}

		var responseHttp = await repository.Delete($"/api/categories/{id}");
		if (responseHttp.Error)
		{
			if (responseHttp.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
			{
				var message = await responseHttp.GetErrorMessageAsync();
				await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
				return;
			}
		}

		await LoadAsynck();

	}
}
